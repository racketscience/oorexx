// warning! this file is generated!
// modify the source C:\OrexxDev\oorexx-svn\platform\windows\orxscrpt\security.rex ONLY!
OLECHAR szSecurityCode []=
L"/*----------------------------------------------------------------------------*/\n"
L"/*                                                                            */\n"
L"/* Copyright (c) 1995, 2004 IBM Corporation. All rights reserved.             */\n"
L"/* Copyright (c) 2005-2006 Rexx Language Association. All rights reserved.    */\n"
L"/*                                                                            */\n"
L"/* This program and the accompanying materials are made available under       */\n"
L"/* the terms of the Common Public License v1.0 which accompanies this         */\n"
L"/* distribution. A copy is also available at the following address:           */\n"
L"/* http://www.oorexx.org/license.html                          */\n"
L"/*                                                                            */\n"
L"/* Redistribution and use in source and binary forms, with or                 */\n"
L"/* without modification, are permitted provided that the following            */\n"
L"/* conditions are met:                                                        */\n"
L"/*                                                                            */\n"
L"/* Redistributions of source code must retain the above copyright             */\n"
L"/* notice, this list of conditions and the following disclaimer.              */\n"
L"/* Redistributions in binary form must reproduce the above copyright          */\n"
L"/* notice, this list of conditions and the following disclaimer in            */\n"
L"/* the documentation and/or other materials provided with the distribution.   */\n"
L"/*                                                                            */\n"
L"/* Neither the name of Rexx Language Association nor the names                */\n"
L"/* of its contributors may be used to endorse or promote products             */\n"
L"/* derived from this software without specific prior written permission.      */\n"
L"/*                                                                            */\n"
L"/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        */\n"
L"/* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT          */\n"
L"/* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS          */\n"
L"/* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   */\n"
L"/* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,      */\n"
L"/* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED   */\n"
L"/* TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,        */\n"
L"/* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY     */\n"
L"/* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING    */\n"
L"/* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         */\n"
L"/* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               */\n"
L"/*                                                                            */\n"
L"/*----------------------------------------------------------------------------*/\n"
L"return .engineSecurity~new(flags)\n"
L"\n"
L"::CLASS engineSecurity\n"
L"\n"
L"/********************************************************************/\n"
L"/* Security manager methods must return a value of either 0 or 1 to */\n"
L"/* the language processor. A  value of 0 indicates that the  program*/\n"
L"/* is authorized to perform the indicated action. In this case,     */\n"
L"/* processing continues as usual. A value of 1 indicates that the   */\n"
L"/* security  manager performed the action itself. The security      */\n"
L"/* manager sets entries in the  information directory to pass       */\n"
L"/* results for the action back to the language  processor.          */\n"
L"/********************************************************************/\n"
L"\n"
L"::METHOD new CLASS\n"
L"  SIGNAL ON syntax\n"
L"  if arg() < 1 then RAISE SYNTAX 93.903 ARRAY(1) Description \"security flags are needed\"\n"
L"  FORWARD CLASS (super)\n"
L"\n"
L"syntax:\n"
L"  RAISE PROPAGATE\n"
L"\n"
L"::METHOD init\n"
L"  expose flags\n"
L"  use arg flags\n"
L"\n"
L"-- bitSet returns non-zero if any of the requested bits are set\n"
L"::METHOD bitSet\n"
L"  expose flags\n"
L"  use arg what\n"
L"  /* UNTRUSTED_DATA == 1, UNTRUSTED_CALLER == 2 */\n"
L"  mask = 0\n"
L"  if what~pos(\"UNTRUSTED_DATA\")   > 0 then mask = mask + 1\n"
L"  if what~pos(\"UNTRUSTED_CALLER\") > 0 then mask = mask + 2\n"
L"  return BITAND(flags~d2c,mask~d2c)~c2d>0  -- true, when any matches!!\n"
L"\n"
L"-- sent for all external function calls\n"
L"::METHOD call\n"
L"/*  use arg directory\n"
L"  say 'method call'\n"
L"  if self~bitSet(\"UNTRUSTED_CALLER\") then\n"
L"    RAISE SYNTAX 48.1 ARRAY ('External function call not allowed in sandbox mode!')\n"
L"--  directory~setentry('RESULT', \"ACCESS DENIED\")*/\n"
L"  return 0\n"
L"\n"
L"-- sent for all host command instructions\n"
L"::METHOD command\n"
L"  use arg directory\n"
L"  SIGNAL ON syntax\n"
L"  if self~bitSet(\"UNTRUSTED_CALLER\") then\n"
L"    RAISE SYNTAX 48.1 ARRAY ('Host command invocation not allowed in sandbox mode!')\n"
L"  return 0\n"
L"\n"
L"syntax:\n"
L"  RAISE PROPAGATE\n"
L"\n"
L"-- sent whenever a ::REQUIRES directive in the file is processed\n"
L"::METHOD requires\n"
L"  use arg directory\n"
L"  if self~bitSet(\"UNTRUSTED_CALLER\") then do\n"
L"-- set the security manager for the required file as well\n"
L"    directory~setentry(\"SECURITYMANAGER\", self)\n"
L"  end\n"
L"-- say we didn't handle so the usual routines resolve to full path for us\n"
L"  return 0\n"
L"\n"
L"-- sent whenever REXX is going to access an entry in the .LOCAL\n"
L"-- directory as part of the resolution of the environment symbol name\n"
L"::METHOD local\n"
L"  use arg directory\n"
L"  SIGNAL ON syntax\n"
L"  if self~bitSet(\"UNTRUSTED_CALLER\") then do\n"
L"    request = directory~name\n"
L"    if (request == \"OUTPUT\") | (request == \"STDOUT\") | (request == \"STDQUE\") |,\n"
L"       (request == \"STDERR\") | (request == \"ERROR\") then\n"
L"      RAISE SYNTAX 48.1 ARRAY ('.LOCAL access ('request') limited in sandbox mode!')\n"
L"  end\n"
L"  return 0\n"
L"\n"
L"syntax:\n"
L"  RAISE PROPAGATE\n"
L"\n"
L"-- sent whenever REXX is going to access an entry in the .ENVIRONMENT\n"
L"-- directory as part of the resolution of the environment symbol name.\n"
L"::METHOD environment\n"
L"  use arg directory\n"
L"  SIGNAL ON syntax\n"
L"  if self~bitSet(\"UNTRUSTED_CALLER\") then do\n"
L"    request = directory~name\n"
L"    if (request == \"QUEUE\") | (request == \"STREAM\") | (request == \"RX_QUEUE\") then\n"
L"      RAISE SYNTAX 48.1 ARRAY ('.ENVIRONMENT access ('request') limited in sandbox mode!')\n"
L"  end\n"
L"  return 0\n"
L"\n"
L"syntax:\n"
L"  RAISE PROPAGATE\n"
L"\n"
L"-- sent whenever one of the REXX input and output built-in functions\n"
L"-- (CHARIN, CHAROUT, CHARS, LINEIN, LINEOUT, LINES, or STREAM) needs\n"
L"-- to resolve a stream name\n"
L"::METHOD stream\n"
L"  use arg directory\n"
L"  SIGNAL ON syntax\n"
L"  if self~bitSet(\"UNTRUSTED_CALLER\") then\n"
L"    RAISE SYNTAX 48.1 ARRAY ('File I/O operation not allowed in sandbox mode!')\n"
L"  return 0\n"
L"\n"
L"syntax:\n"
L"  RAISE PROPAGATE\n"
L"\n"
L"-- sent whenever a secure program attempts to send a message for a\n"
L"-- protected method (see the ::METHOD directive ::METHOD) to an object.\n"
L"::METHOD method\n"
L"  use arg directory\n"
L"  SIGNAL ON syntax\n"
L"  if self~bitSet(\"UNTRUSTED_CALLER\") then do\n"
L"    request = directory~name\n"
L"    if request == \"SETSECURITYMANAGER\" then\n"
L"      RAISE SYNTAX 48.1 ARRAY ('Change of the security manager not allowed in sandbox mode!')\n"
L"  end\n"
L"\n"
L"  return 0\n"
L"\n"
L"syntax:\n"
L"  RAISE PROPAGATE\n"
L" ";
